
type Member {
  id: ID!
  first_name: String
  last_name: String
  contact_number: String
  email: String
  Horses(filter: ModelHorseFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelHorseConnection
  barn: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Horse {
  id: ID!
  owner: ID!
  sex: String
  birth_year: String
  breed: String
  is_show_horse: String
  short_name: String
  is_lesson_horse: String
  rider_experience_level: String
  horse_img: String
  show_name: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Barn {
  id: ID!
  name: String
  phone: String
  Members(filter: ModelMemberFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMemberConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelMemberConnection {
  items: [Member]!
  nextToken: String
}

input ModelMemberFilterInput {
  id: ModelIDInput
  first_name: ModelStringInput
  last_name: ModelStringInput
  contact_number: ModelStringInput
  email: ModelStringInput
  barn: ModelIDInput
  and: [ModelMemberFilterInput]
  or: [ModelMemberFilterInput]
  not: ModelMemberFilterInput
}

type Query {
  getMember(id: ID!): Member
  listMembers(filter: ModelMemberFilterInput, limit: Int, nextToken: String): ModelMemberConnection
  getHorse(id: ID!): Horse
  listHorses(filter: ModelHorseFilterInput, limit: Int, nextToken: String): ModelHorseConnection
  getBarn(id: ID!): Barn
  listBarns(filter: ModelBarnFilterInput, limit: Int, nextToken: String): ModelBarnConnection
}

input ModelMemberConditionInput {
  first_name: ModelStringInput
  last_name: ModelStringInput
  contact_number: ModelStringInput
  email: ModelStringInput
  barn: ModelIDInput
  and: [ModelMemberConditionInput]
  or: [ModelMemberConditionInput]
  not: ModelMemberConditionInput
}

input CreateMemberInput {
  id: ID
  first_name: String
  last_name: String
  contact_number: String
  email: String
  barn: ID!
}

input UpdateMemberInput {
  id: ID!
  first_name: String
  last_name: String
  contact_number: String
  email: String
  barn: ID
}

input DeleteMemberInput {
  id: ID!
}

type Mutation {
  createMember(input: CreateMemberInput!, condition: ModelMemberConditionInput): Member
  updateMember(input: UpdateMemberInput!, condition: ModelMemberConditionInput): Member
  deleteMember(input: DeleteMemberInput!, condition: ModelMemberConditionInput): Member
  createHorse(input: CreateHorseInput!, condition: ModelHorseConditionInput): Horse
  updateHorse(input: UpdateHorseInput!, condition: ModelHorseConditionInput): Horse
  deleteHorse(input: DeleteHorseInput!, condition: ModelHorseConditionInput): Horse
  createBarn(input: CreateBarnInput!, condition: ModelBarnConditionInput): Barn
  updateBarn(input: UpdateBarnInput!, condition: ModelBarnConditionInput): Barn
  deleteBarn(input: DeleteBarnInput!, condition: ModelBarnConditionInput): Barn
}

type Subscription {
  onCreateMember: Member @aws_subscribe(mutations: ["createMember"])
  onUpdateMember: Member @aws_subscribe(mutations: ["updateMember"])
  onDeleteMember: Member @aws_subscribe(mutations: ["deleteMember"])
  onCreateHorse: Horse @aws_subscribe(mutations: ["createHorse"])
  onUpdateHorse: Horse @aws_subscribe(mutations: ["updateHorse"])
  onDeleteHorse: Horse @aws_subscribe(mutations: ["deleteHorse"])
  onCreateBarn: Barn @aws_subscribe(mutations: ["createBarn"])
  onUpdateBarn: Barn @aws_subscribe(mutations: ["updateBarn"])
  onDeleteBarn: Barn @aws_subscribe(mutations: ["deleteBarn"])
}

type ModelHorseConnection {
  items: [Horse]!
  nextToken: String
}

input ModelHorseFilterInput {
  id: ModelIDInput
  owner: ModelIDInput
  sex: ModelStringInput
  birth_year: ModelStringInput
  breed: ModelStringInput
  is_show_horse: ModelStringInput
  short_name: ModelStringInput
  is_lesson_horse: ModelStringInput
  rider_experience_level: ModelStringInput
  horse_img: ModelStringInput
  show_name: ModelStringInput
  and: [ModelHorseFilterInput]
  or: [ModelHorseFilterInput]
  not: ModelHorseFilterInput
}

input ModelHorseConditionInput {
  owner: ModelIDInput
  sex: ModelStringInput
  birth_year: ModelStringInput
  breed: ModelStringInput
  is_show_horse: ModelStringInput
  short_name: ModelStringInput
  is_lesson_horse: ModelStringInput
  rider_experience_level: ModelStringInput
  horse_img: ModelStringInput
  show_name: ModelStringInput
  and: [ModelHorseConditionInput]
  or: [ModelHorseConditionInput]
  not: ModelHorseConditionInput
}

input CreateHorseInput {
  id: ID
  owner: ID!
  sex: String
  birth_year: String
  breed: String
  is_show_horse: String
  short_name: String
  is_lesson_horse: String
  rider_experience_level: String
  horse_img: String
  show_name: String
}

input UpdateHorseInput {
  id: ID!
  owner: ID
  sex: String
  birth_year: String
  breed: String
  is_show_horse: String
  short_name: String
  is_lesson_horse: String
  rider_experience_level: String
  horse_img: String
  show_name: String
}

input DeleteHorseInput {
  id: ID!
}

type ModelBarnConnection {
  items: [Barn]!
  nextToken: String
}

input ModelBarnFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  phone: ModelStringInput
  and: [ModelBarnFilterInput]
  or: [ModelBarnFilterInput]
  not: ModelBarnFilterInput
}

input ModelBarnConditionInput {
  name: ModelStringInput
  phone: ModelStringInput
  and: [ModelBarnConditionInput]
  or: [ModelBarnConditionInput]
  not: ModelBarnConditionInput
}

input CreateBarnInput {
  id: ID
  name: String
  phone: String
}

input UpdateBarnInput {
  id: ID!
  name: String
  phone: String
}

input DeleteBarnInput {
  id: ID!
}

